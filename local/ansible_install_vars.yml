---
GITHUB_ORG: computate-org
PROJECT_NAME: smart-village-view
PROJECT_DISPLAY_NAME: Smart Village Project
PROJECT_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ PROJECT_NAME }}.git"
PROJECT_REPO_HTTPS: "{{ PROJECT_REPO | replace('git@github.com:', 'https://github.com/') }}"
PROJECT_LANG: enUS
PROJECT_ZONE: "America/New_York"
PROJECT_LOCALE: "en-US"
PROJECT_SRC: "{{ lookup('env', 'HOME') }}/.local/src/{{ PROJECT_NAME }}"
PROJECT_POM_GROUP_ID: org.computate
PROJECT_POM_ARTIFACT_ID_ROOT: "{{ PROJECT_NAME }}"
PROJECT_POM_VERSION_PREFIX: "1.0.0"
PROJECT_POM_VERSION_SUFFIX: "-SNAPSHOT"
PROJECT_POM_VERSION: "{{ PROJECT_POM_VERSION_PREFIX }}{{ PROJECT_POM_VERSION_SUFFIX }}"
PROJECT_JAVA_PACKAGE: "{{ PROJECT_POM_GROUP_ID }}.smartvillageview.enus"
PROJECT_PORT: 12080
CLUSTER_PORT: "{{ PROJECT_PORT | regex_replace('(...)', '\\1') }}81"
JDBC_DATABASE: "{{ PROJECT_NAME }}"
JDBC_USERNAME: "{{ PROJECT_NAME }}"
SOLR_COLLECTION: "{{ PROJECT_NAME }}"
ENABLE_SESSION_ID: true
ENABLE_DELETED: true
ENABLE_ARCHIVED: true
ENABLE_ROLE_ADMIN: true
ENABLE_OPENID_CONNECT: true
ENABLE_CODE_GENERATION_SERVICE: true
WRITE_API: true
WRITE_COMMENTS: true
PROJECTS: 

  - GITHUB_ORG: "{{ GITHUB_ORG }}"
    PROJECT_NAME: "{{ PROJECT_NAME }}"
    PROJECT_SRC: "{{ PROJECT_SRC }}"
    PROJECT_JAVA_PACKAGE: "{{ PROJECT_JAVA_PACKAGE }}"
    PROJECT_FILES: 
#      - path: "{{ PROJECT_SRC }}/.project"
#        template: eclipse/project.xml
#      - path: "{{ PROJECT_SRC }}-static/.project"
#        template: eclipse/project-static.xml
#      - path: "{{ PROJECT_SRC }}-ansible/.project"
#        template: eclipse/project-ansible.xml
#      - path: "{{ PROJECT_SRC }}/.classpath"
#        template: eclipse/classpath.xml
#      - path: "{{ PROJECT_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ PROJECT_NAME }}.launch"
#        template: eclipse/launchMainVerticle.xml
#      - path: "{{ PROJECT_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ PROJECT_NAME }}-OpenApi3Generator.launch"
#        template: eclipse/launchOpenApi3Generator.xml
      - path: "{{ PROJECT_SRC }}/pom.xml"
        template: java/pom.xml
      - path: "{{ PROJECT_SRC }}/install.yml"
        template: ansible/install.yml
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/package-info.java"
        template: java/package-info.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_ConfigKeys | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_ConfigKeys }}.java"
        template: config/ConfigKeys.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteRequest | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteRequest }}.java"
        template: request/SiteRequestEnUS.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_PageLayout | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.java"
        template: page/PageLayout.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs"
        template: page/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_HomePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_HomePage }}.java"
        template: page/HomePage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs"
        template: page/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_MainVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_MainVerticle }}.java"
        template: vertx/MainVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_WorkerVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_WorkerVerticle }}.java"
        template: vertx/WorkerVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseModel | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseModel }}.java"
        template: base/BaseModel.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteUser | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteUser }}.java"
        template: user/SiteUser.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SitePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SitePage }}.java"
        template: page/SitePage.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteHtm | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteHtm }}.java"
        template: htm/SiteHtm.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_DynamicPage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.java"
        template: page/DynamicPage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/application.yml"
        template: java/application.yml
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.properties"
        template: log4j/log4j.properties
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.xml"
        template: log4j/log4j.xml
      - path: "{{ PROJECT_SRC }}/local/defaults.yml"
        template: local/defaults.yml
      - path: "{{ PROJECT_SRC }}/local/template.yml"
        template: local/template.yml
      - path: "{{ PROJECT_SRC }}/CONTRIBUTING"
        template: license/CONTRIBUTING
      - path: "{{ PROJECT_SRC }}/DCO"
        template: license/DCO
      - path: "{{ PROJECT_SRC }}/LICENSE"
        template: license/LICENSE
      - path: "{{ PROJECT_SRC }}/README.md"
        template: local/README.md
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/jquery.autocomplete.js"
        template: js/jQuery-Autocomplete/jquery.autocomplete.js
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/license.txt"
        template: js/jQuery-Autocomplete/license.txt
      - path: "{{ PROJECT_SRC }}-static/js/jquery-1.12.4.min.js"
        template: js/jquery-1.12.4.min.js
      - path: "{{ PROJECT_SRC }}-static/js/jquery-ui.js"
        template: js/jquery-ui.js
      - path: "{{ PROJECT_SRC }}-static/js/moment.js"
        template: js/moment.js
      - path: "{{ PROJECT_SRC }}-static/js/plotly-2.9.0.min.js"
        template: js/plotly-2.9.0.min.js
      - path: "{{ PROJECT_SRC }}-static/js/site-enUS.js"
        template: js/site-enUS.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs.js"
        template: js/sockjs.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs-map.json"
        template: js/sockjs-map.json
      - path: "{{ PROJECT_SRC }}-static/js/vertx-eventbus.js"
        template: js/vertx-eventbus.js
      - path: "{{ PROJECT_SRC }}-static/css/jquery-ui.css"
        template: css/jquery-ui.css
      - path: "{{ PROJECT_SRC }}-static/css/site-{{ PROJECT_LANG }}.css"
        template: css/site-enUS.css
      - path: "{{ PROJECT_SRC }}-static/css/w3.css"
        template: css/w3.css
      - path: "{{ PROJECT_SRC }}-static/svg/openshift.svg"
        template: svg/openshift.svg
      - path: "{{ PROJECT_SRC }}/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}-static/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}/bin/touch.sh"
        template: "{{ PROJECT_SRC }}/local/template/config/touch.sh"
      - path: "{{ PROJECT_SRC }}/openshift/defaults.yml"
        template: openshift/defaults.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SERVICE_1.yml"
        template: openshift/SITE_SERVICE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SECRET_1.yml"
        template: openshift/SITE_SECRET_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_ROUTE_1.yml"
        template: openshift/SITE_ROUTE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_IMAGE_STREAM_1.yml"
        template: openshift/SITE_IMAGE_STREAM_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_BUILD_CONFIG_1.yml"
        template: openshift/SITE_BUILD_CONFIG_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_DEPLOYMENT_CONFIG_1.yml"
        template: openshift/SITE_DEPLOYMENT_CONFIG_1.yml

CONFIG_TEMPLATE: |2
  
  YGGIO_HOST_NAME: "\{\{ YGGIO_HOST_NAME \}\}"
  YGGIO_PORT: \{\{ YGGIO_PORT \}\}
  YGGIO_SSL: \{\{ YGGIO_SSL | lower \}\}
  YGGIO_USERNAME: "\{\{ YGGIO_USERNAME \}\}"
  YGGIO_PASSWORD: "\{\{ YGGIO_PASSWORD \}\}"
  YGGIO_API_RELATIVE_URI_IotNode: /api/iotnodes
  YGGIO_AUTH_LOCAL_URI: /api/auth/local

CONFIG_KEYS: |2
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_HOST_NAME = "YGGIO_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PORT = "YGGIO_PORT";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_SSL = "YGGIO_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_API_RELATIVE_URI_IotNode = "YGGIO_API_RELATIVE_URI_IotNode";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_LOCAL_URI = "YGGIO_AUTH_LOCAL_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_USERNAME = "YGGIO_USERNAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PASSWORD = "YGGIO_PASSWORD";

WORKER_IMPORTS: |
  import java.time.LocalDateTime;
  import io.vertx.ext.jdbc.JDBCClient;
  import io.vertx.sqlclient.Cursor;
  import io.vertx.sqlclient.SqlConnection;
  import io.vertx.ext.web.client.predicate.ResponsePredicate;
  import io.vertx.ext.auth.authentication.TokenCredentials;
  import org.computate.smartvillageview.enus.model.iotnode.IotNode;

WORKER_IMPORT_DATA: |2
  
  	/**	
  	 * Import initial data
  	 * Val.Skip.enUS:The data import is disabled. 
  	 **/
  	private Future<Void> importData() {
  		Promise<Void> promise = Promise.promise();
  		if(config().getBoolean(ConfigKeys.ENABLE_IMPORT_DATA)) {
  			importTimer("IotNode").onSuccess(a -> {
  				importTimer("SitePage").onSuccess(b -> {
  					promise.complete();
  				});
  			});
  		}
  		else {
  			LOG.info(importDataSkip);
  			promise.complete();
  		}
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import initial data
  	 * Val.Complete.enUS:Configuring the import of %s data completed. 
  	 * Val.Fail.enUS:Configuring the import of %s data failed. 
  	 */
  	private Future<Void> importDataClass(String classSimpleName, ZonedDateTime startDateTime) {
  		Promise<Void> promise = Promise.promise();
  		if("IotNode".equals(classSimpleName)) {
  			importDataIotNode().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if("SitePage".equals(classSimpleName)) {
  			importDataSitePage().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		}
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import IOT Node data
  	 * Val.Complete.enUS:Importing %s data completed. 
  	 * Val.Fail.enUS:Importing %s data failed. 
  	 */
  	private Future<Void> importDataIotNode() {
  		Promise<Void> promise = Promise.promise();
  		webClient.post(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(ConfigKeys.YGGIO_AUTH_LOCAL_URI))
  				.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  				.expect(ResponsePredicate.SC_OK)
  				.putHeader("Content-Type", "application/json")
  				.sendJsonObject(new JsonObject()
  						.put("username", config().getString(ConfigKeys.YGGIO_USERNAME))
  						.put("password", config().getString(ConfigKeys.YGGIO_PASSWORD))
  						)
  				.onSuccess(tokenResponse -> {
  			JsonObject token = tokenResponse.bodyAsJsonObject();
  			webClient.get(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(ConfigKeys.YGGIO_API_RELATIVE_URI_IotNode))
  					.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  					.authentication(new TokenCredentials(token.getString("token")))
  					.expect(ResponsePredicate.SC_OK)
  					.send()
  					.onSuccess(response -> {
  				JsonArray data = response.bodyAsJsonArray();
  				List<Future> futures = new ArrayList<>();
  
  				data.stream().forEach(row -> {
  					JsonObject json = (JsonObject)row;
  					String id = json.getString("_id");
  
  					JsonObject body = new JsonObject()
  							.put(IotNode.VAR_saves, new JsonArray()
  									.add(IotNode.VAR_inheritPk)
  									.add(IotNode.VAR_json)
  									)
  							.put(IotNode.VAR_json, json)
  							.put(IotNode.VAR_pk, id)
  							;
  
  					JsonObject params = new JsonObject();
  					params.put("body", body);
  					params.put("path", new JsonObject());
  					params.put("cookie", new JsonObject());
  					params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  					JsonObject context = new JsonObject().put("params", params);
  					JsonObject request = new JsonObject().put("context", context);
  					futures.add(vertx.eventBus().request(String.format("smart-village-view-enUS-%s", "IotNode"), request, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", IotNode.CLASS_SIMPLE_NAME))));
  				});
  				CompositeFuture.all(futures).onSuccess(a -> {
  					LOG.info(String.format(importDataIotNodeComplete, IotNode.CLASS_SIMPLE_NAME));
  					promise.complete();
  				}).onFailure(ex -> {
  					LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  					promise.fail(ex);
  				});
  			}).onFailure(ex -> {
  				LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import Site HTML data
  	 * Val.Complete.enUS:Importing %s data completed. 
  	 * Val.Fail.enUS:Importing %s data failed. 
  	 */
  	private Future<Void> importDataSitePage() {
  		Promise<Void> promise = Promise.promise();
  		File pageDir = new File(getClass().getClassLoader().getResource("page").getFile());
  		String[] fileNames = pageDir.list(new PatternFilenameFilter("^.*.yml$"));
  		List<Future> futures = new ArrayList<>();
  		YamlProcessor yamlProcessor = new YamlProcessor();
  
  		for(String fileName : fileNames) {
  			futures.add(importSitePage(yamlProcessor, Paths.get(pageDir.getAbsolutePath(), fileName).toString()));
  		}
  		CompositeFuture.all(futures).onSuccess(a -> {
  			LOG.info(String.format(importDataSitePageComplete, SitePage.CLASS_SIMPLE_NAME));
  			promise.complete();
  		}).onFailure(ex -> {
  			LOG.error(String.format(importDataSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import page
  	 * Val.Complete.enUS:Importing page %s completed. 
  	 * Val.Fail.enUS:Importing page %s failed. 
  	 */
  	private Future<Void> importSitePage(YamlProcessor yamlProcessor, String path) {
  		Promise<Void> promise = Promise.promise();
  		ZonedDateTime now = ZonedDateTime.now(ZoneId.of(config().getString(ConfigKeys.SITE_ZONE)));
  		vertx.fileSystem().readFile(path).onSuccess(buffer -> {
  			yamlProcessor.process(vertx, null, buffer).onSuccess(json -> {
  				try {
  					String pageId = StringUtils.substringBeforeLast(StringUtils.substringAfterLast(path, "/"), ".");
  					JsonObject importBody = new JsonObject();
  					JsonArray importItems = new JsonArray();
  					List<Future> futures = new ArrayList<>();
  					Stack<String> stack = new Stack<>();
  					stack.push("html");
  					stack.push("body");
  					Long sequenceNum = 0L;
  					for(String htmGroup : json.fieldNames()) {
  						if(StringUtils.startsWith(htmGroup, "htm")) {
  							JsonArray pageItems = json.getJsonArray(htmGroup);
  							sequenceNum = importSiteHtml(json, stack, pageId, htmGroup, pageItems, futures, sequenceNum);
  						}
  					}
  					importBody.put("list", importItems);
  	
  					CompositeFuture.all(futures).onSuccess(a -> {
  						JsonObject pageBody = new JsonObject();
  						pageBody.put(SitePage.VAR_saves, new JsonArray()
  								.add(SitePage.VAR_inheritPk)
  								.add(SitePage.VAR_created)
  								.add(SitePage.VAR_courseNum)
  								.add(SitePage.VAR_lessonNum)
  								.add(SitePage.VAR_author)
  								.add(SitePage.VAR_objectId)
  								.add(SitePage.VAR_objectTitle)
  								.add(SitePage.VAR_uri)
  								.add(SitePage.VAR_h1)
  								.add(SitePage.VAR_h2)
  								);
  						pageBody.put(SitePage.VAR_id, pageId);
  						pageBody.put(SitePage.VAR_objectId, pageId);
  						pageBody.put(SitePage.VAR_pageId, pageId);
  						pageBody.put(SitePage.VAR_objectTitle, json.getString("title"));
  						pageBody.put(SitePage.VAR_created, json.getString("created"));
  						pageBody.put(SitePage.VAR_courseNum, json.getInteger(SitePage.VAR_courseNum));
  						pageBody.put(SitePage.VAR_lessonNum, json.getInteger(SitePage.VAR_lessonNum));
  						pageBody.put(SitePage.VAR_author, json.getString("author"));
  						pageBody.put(SitePage.VAR_uri, json.getString("uri"));
  						pageBody.put(SitePage.VAR_h1, json.getString("h1"));
  						pageBody.put(SitePage.VAR_h2, json.getString("h2"));
  		
  						JsonObject pageParams = new JsonObject();
  						pageParams.put("body", pageBody);
  						pageParams.put("path", new JsonObject());
  						pageParams.put("cookie", new JsonObject());
  						pageParams.put("query", new JsonObject().put("commitWithin", 1000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  						JsonObject pageContext = new JsonObject().put("params", pageParams);
  						JsonObject pageRequest = new JsonObject().put("context", pageContext);
  						vertx.eventBus().request(String.format("smart-village-view-enUS-%s", SitePage.CLASS_SIMPLE_NAME), pageRequest, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", SitePage.CLASS_SIMPLE_NAME))).onSuccess(b -> {
  							String solrHostName = config().getString(ComputateVertxConfigKeys.SOLR_HOST_NAME);
  							Integer solrPort = config().getInteger(ComputateVertxConfigKeys.SOLR_PORT);
  							String solrCollection = config().getString(ComputateVertxConfigKeys.SOLR_COLLECTION);
  							String solrRequestUri = String.format("/solr/%s/update%s", solrCollection, "?commitWithin=1000&overwrite=true&wt=json");
  							String deleteQuery = String.format("classSimpleName_docvalues_string:%s AND created_docvalues_date:[* TO %s]", SiteHtm.CLASS_SIMPLE_NAME, SiteHtm.staticSearchStrCreated(null, SiteHtm.staticSearchCreated(null, now)));
  							String deleteXml = String.format("<delete><query>%s</query></delete>", deleteQuery);
  							webClient.post(solrPort, solrHostName, solrRequestUri)
  									.putHeader("Content-Type", "text/xml")
  									.sendBuffer(Buffer.buffer().appendString(deleteXml))
  									.onSuccess(c -> {
  								try {
  									LOG.info(String.format(importSitePageComplete, SitePage.CLASS_SIMPLE_NAME));
  									promise.complete();
  								} catch(Exception ex) {
  									LOG.error(String.format("Could not read response from Solr: http://%s:%s%s", solrHostName, solrPort, solrRequestUri), ex);
  									promise.fail(ex);
  								}
  							}).onFailure(ex -> {
  								LOG.error(String.format("Search failed. "), new RuntimeException(ex));
  								promise.fail(ex);
  							});
  						}).onFailure(ex -> {
  							LOG.error(String.format(importSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  							promise.fail(ex);
  						});
  					}).onFailure(ex -> {
  						LOG.error(String.format(importSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  						promise.fail(ex);
  					});
  				} catch(Exception ex) {
  					LOG.error(String.format(importSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  					promise.fail(ex);
  				}
  			}).onFailure(ex -> {
  				LOG.error(String.format(importSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(String.format(importSitePageFail, SitePage.CLASS_SIMPLE_NAME), ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	private Long importSiteHtml(JsonObject json, Stack<String> stack, String pageId, String htmGroup, JsonArray pageItems, List<Future> futures, Long sequenceNum) throws Exception {
  		Double sort = 0D;
  		for(Integer i = 0; i < pageItems.size(); i++) {
  			JsonObject pageItem = (JsonObject)pageItems.getValue(i);
  			String uri = json.getString(SiteHtm.VAR_uri);
  			Object in = pageItem.getValue("in");
  			String e = pageItem.getString("e");
  			JsonObject a = pageItem.getJsonObject(SiteHtm.VAR_a);
  			Boolean eNoWrapParent = false;
  			Boolean eNoWrap = false;
  			String tabs = "";
  			if(e != null) {
  				String localNameParent = stack.isEmpty() ? null : stack.peek();
  				eNoWrapParent = localNameParent == null || XmlTool.HTML_ELEMENTS_NO_WRAP.contains(localNameParent);
  				eNoWrap = localNameParent == null || XmlTool.HTML_ELEMENTS_NO_WRAP.contains(e);
  				tabs = String.join("", Collections.nCopies(stack.size(), "  "));
  				stack.push(e);
  			}
  
  			{
  				sequenceNum++;
  				JsonObject importItem = new JsonObject();
  				if(e != null)
  					importItem.put(SiteHtm.VAR_eBefore, e);
  				String text = pageItem.getString(SiteHtm.VAR_text);
  				if(text != null) {
  					Template template = handlebars.compileInline(text);
  					Context engineContext = Context.newBuilder(json.getMap()).resolver(templateEngine.getResolvers()).build();
  					Buffer buffer = Buffer.buffer(template.apply(engineContext));
  					
  					importItem.put(SiteHtm.VAR_text, new JsonArray().addAll(new JsonArray(Arrays.asList(buffer.toString().split("\r?\n")))));
  				}
  				if(!eNoWrapParent && !tabs.isEmpty()) {
  					importItem.put(SiteHtm.VAR_tabs, tabs);
  				}
  				if(!eNoWrap) {
  					importItem.put(SiteHtm.VAR_newLine, true);
  				}
  				importItem.put(SiteHtm.VAR_saves, new JsonArray()
  						.add(SiteHtm.VAR_eBefore)
  						.add(SiteHtm.VAR_a)
  						.add(SiteHtm.VAR_htmBefore)
  						.add(SiteHtm.VAR_sequenceNum)
  						.add(SiteHtm.VAR_htmGroup)
  						.add(SiteHtm.VAR_pageId)
  						.add(SiteHtm.VAR_tabs)
  						.add(SiteHtm.VAR_uri)
  						.add(SiteHtm.VAR_text)
  						);
  				importItem.put(SiteHtm.VAR_created, ComputateZonedDateTimeSerializer.ZONED_DATE_TIME_FORMATTER.format(ZonedDateTime.now()));
  				importItem.put(SiteHtm.VAR_pageId, pageId);
  				importItem.put(SiteHtm.VAR_htmGroup, htmGroup);
  				importItem.put(SiteHtm.VAR_sequenceNum, sequenceNum);
  				importItem.put(SiteHtm.VAR_uri, uri);
  				if(a != null)
  					importItem.put(SiteHtm.VAR_a, a);
  				importItem.put(SiteHtm.VAR_id, String.format("%s_%s", SiteHtm.CLASS_SIMPLE_NAME, sequenceNum));
  				for(Integer j=1; j <= stack.size(); j++) {
  					importItem.put("sort" + j, stack.get(j - 1));
  				}
  	
  				JsonObject htmParams = new JsonObject();
  				htmParams.put("body", importItem);
  				htmParams.put("path", new JsonObject());
  				htmParams.put("cookie", new JsonObject());
  				htmParams.put("query", new JsonObject().put("commitWithin", 1000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  				JsonObject htmContext = new JsonObject().put("params", htmParams);
  				JsonObject htmRequest = new JsonObject().put("context", htmContext);
  				futures.add(vertx.eventBus().request(String.format("smart-village-view-enUS-%s", SiteHtm.CLASS_SIMPLE_NAME), htmRequest, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", SiteHtm.CLASS_SIMPLE_NAME))));
  			}
  
  			if(in != null) {
  				if(in instanceof JsonObject) {
  					sequenceNum = importSiteHtml(json, stack, pageId, htmGroup, new JsonArray().add(in), futures, sequenceNum);
  				} else if(in instanceof JsonArray) {
  					sequenceNum = importSiteHtml(json, stack, pageId, htmGroup, (JsonArray)in, futures, sequenceNum);
  				}
  			}
  
  			if(e != null) {
  				sequenceNum++;
  				JsonObject importItem = new JsonObject();
  				importItem.put(SiteHtm.VAR_eAfter, e);
  				if(!eNoWrap && !tabs.isEmpty()) {
  					importItem.put(SiteHtm.VAR_tabs, tabs);
  				}
  				if(!eNoWrapParent) {
  					importItem.put(SiteHtm.VAR_newLine, true);
  				}
  				importItem.put(SiteHtm.VAR_saves, new JsonArray()
  						.add(SiteHtm.VAR_eAfter)
  						.add(SiteHtm.VAR_htmAfter)
  						.add(SiteHtm.VAR_sequenceNum)
  						.add(SiteHtm.VAR_htmGroup)
  						.add(SiteHtm.VAR_pageId)
  						.add(SiteHtm.VAR_tabs)
  						.add(SiteHtm.VAR_uri)
  						);
  				importItem.put(SiteHtm.VAR_created, ComputateZonedDateTimeSerializer.ZONED_DATE_TIME_FORMATTER.format(ZonedDateTime.now()));
  				importItem.put(SiteHtm.VAR_pageId, pageId);
  				importItem.put(SiteHtm.VAR_htmGroup, htmGroup);
  				importItem.put(SiteHtm.VAR_sequenceNum, sequenceNum);
  				importItem.put(SiteHtm.VAR_uri, uri);
  				importItem.put(SiteHtm.VAR_id, String.format("%s_%s", SiteHtm.CLASS_SIMPLE_NAME, sequenceNum));
  				for(Integer j=1; j <= stack.size(); j++) {
  					importItem.put("sort" + j, stack.get(j - 1));
  				}
  	
  				JsonObject htmParams = new JsonObject();
  				htmParams.put("body", importItem);
  				htmParams.put("path", new JsonObject());
  				htmParams.put("cookie", new JsonObject());
  				htmParams.put("query", new JsonObject().put("commitWithin", 1000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  				JsonObject htmContext = new JsonObject().put("params", htmParams);
  				JsonObject htmRequest = new JsonObject().put("context", htmContext);
  				futures.add(vertx.eventBus().request(String.format("smart-village-view-enUS-%s", SiteHtm.CLASS_SIMPLE_NAME), htmRequest, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", SiteHtm.CLASS_SIMPLE_NAME))));
  			}
  
  			if(e != null) {
  				stack.pop();
  			}
  		}
  		return sequenceNum;
  	}

README_END: |
  
  # Load a new map traffic data into SUMO
  
  ```bash
  cd ~/.local/share/sumo/data
  env LD_LIBRARY_PATH=~/.local/lib "SUMO_HOME=$HOME/.local/share/sumo" python ~/.local/share/sumo/tools/osmWebWizard.py
  ```
  
  # Export SUMO vehicle coordinate data
  
  ```bash
  env LD_LIBRARY_PATH=~/.local/lib "SUMO_HOME=$HOME/.local/share/sumo" SUMO_HOME=~/.local/share/sumo sumo --fcd-output ~/.local/share/sumo/data/veberod/veberod-fcd.xml -c ~/.local/share/sumo/data/veberod/veberod.sumocfg --fcd-output.geo -b 10 -e 360 --step-length 0.1
  ```
  
  # Run SUMO with Traci TCP server
  
  ```bash
  env SUMO_HOME=/home/ctate/.local/share/sumo LD_LIBRARY_PATH=/home/ctate/.local/lib /home/ctate/.local/bin/sumo-gui --remote-port 8813 --num-clients 1 --start
  ```
  
  ## Python interact with the Traci TCP server
  
  ```bash
  cd ~/.local/share/sumo/tools
  ```
  
  ```python
  import traci
  conn = traci.connect()
  conn.simulationStep()
  conn.simulationStep()
  conn.simulationStep()
  ```

