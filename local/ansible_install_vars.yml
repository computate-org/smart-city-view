GITHUB_ORG: computate-org
PROJECT_NAME: smart-village-view
PROJECT_LANG: enUS
PROJECT_ZONE: "America/New_York"
PROJECT_LOCALE: "en-US"
PROJECT_SRC: "{{ lookup('env', 'HOME') }}/.local/src/{{ PROJECT_NAME }}"
PROJECT_POM_GROUP_ID: org.computate
PROJECT_POM_ARTIFACT_ID_ROOT: "{{ PROJECT_NAME }}"
PROJECT_POM_VERSION_PREFIX: "1.0.0"
PROJECT_POM_VERSION_SUFFIX: "-SNAPSHOT"
PROJECT_POM_VERSION: "{{ PROJECT_POM_VERSION_PREFIX }}{{ PROJECT_POM_VERSION_SUFFIX }}"
PROJECT_JAVA_PACKAGE: "{{ PROJECT_POM_GROUP_ID }}.smartvillageview.enus"
PROJECT_PORT: 12080
CLUSTER_PORT: "{{ PROJECT_PORT | regex_replace('(...)', '\\1') }}81"
JDBC_DATABASE: "{{ PROJECT_NAME }}"
JDBC_USERNAME: "{{ PROJECT_NAME }}"
SOLR_COLLECTION: "{{ PROJECT_NAME }}"
ENABLE_SESSION_ID: true
ENABLE_DELETED: true
ENABLE_ARCHIVED: true
ENABLE_ROLE_ADMIN: true
ENABLE_OPENID_CONNECT: true
ENABLE_CODE_GENERATION_SERVICE: true
WRITE_API: true
WRITE_COMMENTS: true
PROJECTS: 

  - GITHUB_ORG: "{{ GITHUB_ORG }}"
    PROJECT_NAME: "{{ PROJECT_NAME }}"
    PROJECT_SRC: "{{ PROJECT_SRC }}"
    PROJECT_JAVA_PACKAGE: "{{ PROJECT_JAVA_PACKAGE }}"
    PROJECT_FILES: 
      - path: "{{ PROJECT_SRC }}/pom.xml"
        template: java/pom.xml
      - path: "{{ PROJECT_SRC }}/install.yml"
        template: ansible/install.yml
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/package-info.java"
        template: java/package-info.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_ConfigKeys | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_ConfigKeys }}.java"
        template: config/ConfigKeys.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteRequest | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteRequest }}.java"
        template: request/SiteRequestEnUS.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_PageLayout | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.java"
        template: page/PageLayout.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs"
        template: page/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_HomePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_HomePage }}.java"
        template: page/HomePage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs"
        template: page/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_MainVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_MainVerticle }}.java"
        template: vertx/MainVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_WorkerVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_WorkerVerticle }}.java"
        template: vertx/WorkerVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseModel | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseModel }}.java"
        template: base/BaseModel.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteUser | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteUser }}.java"
        template: user/SiteUser.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/application.yml"
        template: java/application.yml
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.properties"
        template: log4j/log4j.properties
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.xml"
        template: log4j/log4j.xml
#      - path: "{{ PROJECT_SRC }}/local/defaults.yml"
#        template: local/defaults.yml
#      - path: "{{ PROJECT_SRC }}/local/template.yml"
#        template: local/template.yml
      - path: "{{ PROJECT_SRC }}/CONTRIBUTING"
        template: license/CONTRIBUTING
      - path: "{{ PROJECT_SRC }}/DCO"
        template: license/DCO
      - path: "{{ PROJECT_SRC }}/LICENSE"
        template: license/LICENSE
      - path: "{{ PROJECT_SRC }}/README.md"
        template: local/README.md
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/jquery.autocomplete.js"
        template: js/jQuery-Autocomplete/jquery.autocomplete.js
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/license.txt"
        template: js/jQuery-Autocomplete/license.txt
      - path: "{{ PROJECT_SRC }}-static/js/jquery-1.12.4.min.js"
        template: js/jquery-1.12.4.min.js
      - path: "{{ PROJECT_SRC }}-static/js/jquery-ui.js"
        template: js/jquery-ui.js
      - path: "{{ PROJECT_SRC }}-static/js/moment.js"
        template: js/moment.js
      - path: "{{ PROJECT_SRC }}-static/js/plotly-2.9.0.min.js"
        template: js/plotly-2.9.0.min.js
      - path: "{{ PROJECT_SRC }}-static/js/site-enUS.js"
        template: js/site-enUS.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs.js"
        template: js/sockjs.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs-map.json"
        template: js/sockjs-map.json
      - path: "{{ PROJECT_SRC }}-static/js/vertx-eventbus.js"
        template: js/vertx-eventbus.js
      - path: "{{ PROJECT_SRC }}-static/css/jquery-ui.css"
        template: css/jquery-ui.css
      - path: "{{ PROJECT_SRC }}-static/css/site-{{ PROJECT_LANG }}.css"
        template: css/site.css
      - path: "{{ PROJECT_SRC }}-static/css/w3.css"
        template: css/w3.css
      - path: "{{ PROJECT_SRC }}-static/svg/openshift.svg"
        template: svg/openshift.svg
      - path: "{{ PROJECT_SRC }}/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}-static/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}/bin/touch.sh"
        template: "{{ PROJECT_SRC }}/local/template/config/touch.sh"

CONFIG_KEYS: |2
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_HOST_NAME = "YGGIO_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PORT = "YGGIO_PORT";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_SSL = "YGGIO_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_API_RELATIVE_URI = "YGGIO_API_RELATIVE_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_TOKEN_URI = "YGGIO_AUTH_TOKEN_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_LOCAL_URI = "YGGIO_AUTH_LOCAL_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_SCOPE = "YGGIO_AUTH_SCOPE";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_CLIENT_ID = "YGGIO_AUTH_CLIENT_ID";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_USERNAME = "YGGIO_USERNAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PASSWORD = "YGGIO_PASSWORD";

WORKER_IMPORTS: |
  import java.time.LocalDateTime;
  import io.vertx.ext.jdbc.JDBCClient;
  import io.vertx.sqlclient.Cursor;
  import io.vertx.sqlclient.SqlConnection;
  import io.vertx.ext.web.client.predicate.ResponsePredicate;
  import io.vertx.ext.auth.authentication.TokenCredentials;
  import org.computate.smartvillageview.enus.model.iotnode.IotNode;

WORKER_IMPORT_DATA: |2
  
  	/**
  	 * Description: Import initial data
  	 * Val.Complete.enUS:Configuring the import of %s data completed. 
  	 * Val.Fail.enUS:Configuring the import of %s data failed. 
  	 */
  	private void importDataClass(String classSimpleName, ZonedDateTime startDateTime) {
  		if("IotNode".equals(classSimpleName)) {
  			importDataIotNode().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  				}
  			});
  		}
  	}
  
  	/**
  	 * Description: Import IOT Node data
  	 * Val.Complete.enUS:Importing %s data completed. 
  	 * Val.Fail.enUS:Importing %s data failed. 
  	 */
  	private Future<Void> importDataIotNode() {
  		Promise<Void> promise = Promise.promise();
  		webClient.post(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(ConfigKeys.YGGIO_AUTH_LOCAL_URI))
  				.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  				.expect(ResponsePredicate.SC_OK)
  				.putHeader("Content-Type", "application/json")
  				.sendJsonObject(new JsonObject()
  						.put("username", config().getString(ConfigKeys.YGGIO_USERNAME))
  						.put("password", config().getString(ConfigKeys.YGGIO_PASSWORD))
  						)
  				.onSuccess(tokenResponse -> {
  			JsonObject token = tokenResponse.bodyAsJsonObject();
  			webClient.get(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(String.format("%s_%s", ConfigKeys.YGGIO_API_RELATIVE_URI, "IotNode")))
  					.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  					.authentication(new TokenCredentials(token.getString("token")))
  					.expect(ResponsePredicate.SC_OK)
  					.send()
  					.onSuccess(response -> {
  				JsonArray data = response.bodyAsJsonArray();
  				List<Future> futures = new ArrayList<>();
  
  				data.stream().forEach(row -> {
  					JsonObject iotNode = (JsonObject)row;
  					String id = iotNode.getString("_id");
  					String name = iotNode.getString("name");
  					String nodeType = iotNode.getString("nodeType");
  					JsonArray latlng = iotNode.getJsonArray("latlng");
  
  					JsonObject body = new JsonObject()
  							.put(IotNode.VAR_saves, new JsonArray()
  									.add(IotNode.VAR_inheritPk)
  									.add(IotNode.VAR_nodeId)
  									.add(IotNode.VAR_nodeName)
  									.add(IotNode.VAR_nodeType)
  									.add(IotNode.VAR_location)
  									)
  							.put(IotNode.VAR_pk, id)
  							.put(IotNode.VAR_nodeId, id)
  							.put(IotNode.VAR_nodeName, name)
  							.put(IotNode.VAR_nodeType, nodeType)
  							;
  					if(latlng != null && latlng.size() == 2)
  						body.put(IotNode.VAR_location, String.format("%s,%s", latlng.getDouble(0), latlng.getDouble(1)));
  
  					JsonObject params = new JsonObject();
  					params.put("body", body);
  					params.put("path", new JsonObject());
  					params.put("cookie", new JsonObject());
  					params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  					JsonObject context = new JsonObject().put("params", params);
  					JsonObject json = new JsonObject().put("context", context);
  					futures.add(vertx.eventBus().request(String.format("smart-village-view-enUS-%s", "IotNode"), json, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", IotNode.CLASS_SIMPLE_NAME))));
  				});
  				CompositeFuture.all(futures).onSuccess(a -> {
  					LOG.info(String.format(importDataIotNodeComplete, IotNode.CLASS_SIMPLE_NAME));
  					promise.complete();
  				}).onFailure(ex -> {
  					LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  					promise.fail(ex);
  				});
  			}).onFailure(ex -> {
  				LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}
  
  	/**	
  	 * Import initial data
  	 * Val.Skip.enUS:The data import is disabled. 
  	 **/
  	private Future<Void> importData() {
  		Promise<Void> promise = Promise.promise();
  		if(config().getBoolean(ConfigKeys.ENABLE_IMPORT_DATA)) {
  			importTimer("IotNode");
  			promise.complete();
  		}
  		else {
  			LOG.info(importDataSkip);
  			promise.complete();
  		}
  		return promise.future();
  	}

README_END: |
  
  # Load a new map traffic data into SUMO
  
  ```bash
  env "SUMO_HOME=$HOME/.local/share/sumo" python ~/.local/share/sumo/tools/osmWebWizard.py
  ```
