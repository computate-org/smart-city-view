---
GITHUB_ORG: computate-org
QUAYIO_ORG: computateorg
PROJECT_POWERED_BY_NAME: Operate First
PROJECT_POWERED_BY_URL: https://www.operate-first.cloud/
PROJECT_POWERED_BY_IMAGE_URI: /png/operate-first-logo.png
PROJECT_NAME: smart-village-view
PROJECT_DISPLAY_NAME: Smart Village Project
PROJECT_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ PROJECT_NAME }}.git"
PROJECT_REPO_HTTPS: "{{ PROJECT_REPO | replace('git@github.com:', 'https://github.com/') }}"
PROJECT_LANG: enUS
PROJECT_ZONE: "America/New_York"
PROJECT_LOCALE: "en-US"
PROJECT_SRC: "{{ lookup('env', 'HOME') }}/.local/src/{{ PROJECT_NAME }}"
PROJECT_POM_GROUP_ID: org.computate
PROJECT_POM_ARTIFACT_ID_ROOT: "{{ PROJECT_NAME }}"
PROJECT_POM_VERSION_PREFIX: "1.0.0"
PROJECT_POM_VERSION_SUFFIX: "-SNAPSHOT"
PROJECT_POM_VERSION: "{{ PROJECT_POM_VERSION_PREFIX }}{{ PROJECT_POM_VERSION_SUFFIX }}"
PROJECT_JAVA_PACKAGE: "{{ PROJECT_POM_GROUP_ID }}.smartvillageview.enus"
PROJECT_PORT: 12080
CLUSTER_PORT: "{{ PROJECT_PORT | regex_replace('(...)', '\\1') }}81"
JDBC_DATABASE: "{{ PROJECT_NAME }}"
JDBC_USERNAME: "{{ PROJECT_NAME }}"
SOLR_COLLECTION: "{{ PROJECT_NAME }}"
ENABLE_SESSION_ID: true
ENABLE_DELETED: true
ENABLE_ARCHIVED: true
ENABLE_ROLE_ADMIN: true
ENABLE_OPENID_CONNECT: true
ENABLE_CODE_GENERATION_SERVICE: true
WRITE_API: true
WRITE_COMMENTS: true
PROJECTS: 

  - GITHUB_ORG: "{{ GITHUB_ORG }}"
    PROJECT_NAME: "{{ PROJECT_NAME }}"
    PROJECT_SRC: "{{ PROJECT_SRC }}"
    PROJECT_JAVA_PACKAGE: "{{ PROJECT_JAVA_PACKAGE }}"
    PROJECT_FILES: 
      - path: "{{ PROJECT_SRC }}/bin/touch.sh"
        template: touch.sh
      - path: "{{ PROJECT_SRC }}/pom.xml"
        template: java/pom.xml
      - path: "{{ PROJECT_SRC }}/install.yml"
        template: ansible/install.yml
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/package-info.java"
        template: java/package-info.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_ConfigKeys | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_ConfigKeys }}.java"
        template: config/ConfigKeys.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteRequest | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteRequest }}.java"
        template: request/SiteRequestEnUS.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_PageLayout | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.java"
        template: page/PageLayout.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs"
        template: page/PageLayout.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_HomePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_HomePage }}.java"
        template: page/HomePage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs"
        template: page/HomePage.hbs
      - path: "{{ PROJECT_SRC }}/src/main/resources/templates/{{ PROJECT_LANG }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.hbs"
        template: page/DynamicPage.hbs
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_MainVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_MainVerticle }}.java"
        template: vertx/MainVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_WorkerVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_WorkerVerticle }}.java"
        template: vertx/WorkerVerticle.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseModel | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseModel }}.java"
        template: base/BaseModel.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteUser | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteUser }}.java"
        template: user/SiteUser.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SitePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SitePage }}.java"
        template: page/SitePage.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteHtm | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteHtm }}.java"
        template: htm/SiteHtm.java
      - path: "{{ PROJECT_SRC }}/src/main/java/{{ PROJECT_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_DynamicPage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.java"
        template: page/DynamicPage.java
      - path: "{{ PROJECT_SRC }}/src/main/resources/application.yml"
        template: java/application.yml
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.properties"
        template: log4j/log4j.properties
      - path: "{{ PROJECT_SRC }}/src/main/resources/log4j.xml"
        template: log4j/log4j.xml
      - path: "{{ PROJECT_SRC }}/local/defaults.yml"
        template: local/defaults.yml
      - path: "{{ PROJECT_SRC }}/local/template.yml"
        template: local/template.yml
      - path: "{{ PROJECT_SRC }}/CONTRIBUTING"
        template: license/CONTRIBUTING
      - path: "{{ PROJECT_SRC }}/DCO"
        template: license/DCO
      - path: "{{ PROJECT_SRC }}/LICENSE"
        template: license/LICENSE
      - path: "{{ PROJECT_SRC }}/README.md"
        template: local/README.md
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/jquery.autocomplete.js"
        template: js/jQuery-Autocomplete/jquery.autocomplete.js
      - path: "{{ PROJECT_SRC }}-static/js/jQuery-Autocomplete/license.txt"
        template: js/jQuery-Autocomplete/license.txt
      - path: "{{ PROJECT_SRC }}-static/js/jquery-1.12.4.min.js"
        template: js/jquery-1.12.4.min.js
      - path: "{{ PROJECT_SRC }}-static/js/jquery-ui.js"
        template: js/jquery-ui.js
      - path: "{{ PROJECT_SRC }}-static/js/moment.js"
        template: js/moment.js
      - path: "{{ PROJECT_SRC }}-static/js/plotly-2.9.0.min.js"
        template: js/plotly-2.9.0.min.js
      - path: "{{ PROJECT_SRC }}-static/js/site-enUS.js"
        template: js/site-enUS.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs.js"
        template: js/sockjs.js
      - path: "{{ PROJECT_SRC }}-static/js/sockjs-map.json"
        template: js/sockjs-map.json
      - path: "{{ PROJECT_SRC }}-static/js/vertx-eventbus.js"
        template: js/vertx-eventbus.js
      - path: "{{ PROJECT_SRC }}-static/css/jquery-ui.css"
        template: css/jquery-ui.css
      - path: "{{ PROJECT_SRC }}-static/css/site-{{ PROJECT_LANG }}.css"
        template: css/site-enUS.css
      - path: "{{ PROJECT_SRC }}-static/css/w3.css"
        template: css/w3.css
      - path: "{{ PROJECT_SRC }}-static/svg/openshift.svg"
        template: svg/openshift.svg
      - path: "{{ PROJECT_SRC }}/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}-static/.gitignore"
        template: config/gitignore
      - path: "{{ PROJECT_SRC }}/openshift/defaults.yml"
        template: openshift/defaults.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SERVICE_1.yml"
        template: openshift/SITE_SERVICE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_SECRET_1.yml"
        template: openshift/SITE_SECRET_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_ROUTE_1.yml"
        template: openshift/SITE_ROUTE_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_IMAGE_STREAM_1.yml"
        template: openshift/SITE_IMAGE_STREAM_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_BUILD_CONFIG_1.yml"
        template: openshift/SITE_BUILD_CONFIG_1.yml
      - path: "{{ PROJECT_SRC }}/openshift/SITE_DEPLOYMENT_CONFIG_1.yml"
        template: openshift/SITE_DEPLOYMENT_CONFIG_1.yml
      - path: "{{ PROJECT_SRC }}/Dockerfile"
        template: openshift/Dockerfile

CONFIG_TEMPLATE: |2
  
  YGGIO_HOST_NAME: "\{\{ YGGIO_HOST_NAME \}\}"
  YGGIO_PORT: \{\{ YGGIO_PORT \}\}
  YGGIO_SSL: \{\{ YGGIO_SSL | lower \}\}
  YGGIO_USERNAME: "\{\{ YGGIO_USERNAME \}\}"
  YGGIO_PASSWORD: "\{\{ YGGIO_PASSWORD \}\}"
  YGGIO_API_RELATIVE_URI_IotNode: /api/iotnodes
  YGGIO_AUTH_LOCAL_URI: /api/auth/local
  DEFAULT_MAP_LOCATION: "55.61888,13.548799"
  DEFAULT_MAP_ZOOM: "3"

CONFIG_KEYS: |2
  
  	/**
  	 * 
  	 **/
  	public static final String DYNAMIC_PAGE_PATH = "DYNAMIC_PAGE_PATH";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_HOST_NAME = "YGGIO_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PORT = "YGGIO_PORT";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_SSL = "YGGIO_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_API_RELATIVE_URI_IotNode = "YGGIO_API_RELATIVE_URI_IotNode";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_LOCAL_URI = "YGGIO_AUTH_LOCAL_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_USERNAME = "YGGIO_USERNAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PASSWORD = "YGGIO_PASSWORD";
  
  	/**
  	 * The name Github organization for the site. 
  	 **/
  	public static final String GITHUB_ORG = "GITHUB_ORG";
  
  	/**
  	 * The project powered by URL. 
  	 **/
  	public static final String PROJECT_POWERED_BY_URL = "PROJECT_POWERED_BY_URL";
  
  	/**
  	 * The project powered by organization name. 
  	 **/
  	public static final String PROJECT_POWERED_BY_NAME = "PROJECT_POWERED_BY_NAME";
  
  	/**
  	 * The project powered by image relative URI. 
  	 **/
  	public static final String PROJECT_POWERED_BY_IMAGE_URI = "PROJECT_POWERED_BY_IMAGE_URI";
  
  	/**
  	 * The Floating Car Data directory. 
  	 **/
  	public static final String FCD_SYNC_PATH = "FCD_SYNC_PATH";
  
  	/**
  	 * The max number of Floating Car Data records to load in a batch. 
  	 **/
  	public static final String FCD_MAX_RECORD_SIZE = "FCD_MAX_RECORD_SIZE";
  
  	/**
  	 * The max read buffer size to load in a batch. 
  	 **/
  	public static final String READ_BUFFER_SIZE = "READ_BUFFER_SIZE";
  
  	/**
  	 * Periodically check the sync operations to check that they are still progressing. 
  	 * If not, fetch more data. 
  	 **/
  	public static final String API_CHECK_TIMER_MILLIS = "API_CHECK_TIMER_MILLIS";
  
  	/**
  	 * Map default location. 
  	 **/
  	public static final String DEFAULT_MAP_LOCATION = "DEFAULT_MAP_LOCATION";
  
  	/**
  	 * Map default zoom. 
  	 **/
  	public static final String DEFAULT_MAP_ZOOM = "DEFAULT_MAP_ZOOM";

WORKER_IMPORTS: |
  import java.time.LocalDateTime;
  import io.vertx.ext.jdbc.JDBCClient;
  import io.vertx.sqlclient.Cursor;
  import io.vertx.sqlclient.SqlConnection;
  import io.vertx.ext.web.client.predicate.ResponsePredicate;
  import io.vertx.ext.auth.authentication.TokenCredentials;
  import org.computate.smartvillageview.enus.model.iotnode.IotNode;
  import org.computate.smartvillageview.enus.model.traffic.simulation.reader.TrafficFcdReader;
  import org.computate.smartvillageview.enus.model.traffic.time.step.TimeStep;

WORKER_IMPORT_DATA: |2
  
  	/**	
  	 * Import initial data
  	 * Val.Skip.enUS:The data import is disabled. 
  	 **/
  	private Future<Void> importData() {
  		Promise<Void> promise = Promise.promise();
  		if(config().getBoolean(ConfigKeys.ENABLE_IMPORT_DATA)) {
  			importTimer("IotNode").onSuccess(a -> {
  				importTimer("SitePage").onSuccess(b -> {
  					importTimer(TimeStep.CLASS_SIMPLE_NAME).onSuccess(c -> {
  						promise.complete();
  					});
  				});
  			});
  		}
  		else {
  			LOG.info(importDataSkip);
  			promise.complete();
  		}
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import initial data
  	 * Val.Complete.enUS:Configuring the import of %s data completed. 
  	 * Val.Fail.enUS:Configuring the import of %s data failed. 
  	 */
  	private Future<Void> importDataClass(String classSimpleName, ZonedDateTime startDateTime) {
  		Promise<Void> promise = Promise.promise();
  		if(IotNode.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			importDataIotNode().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if(SitePage.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			importDataSitePage().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if(TimeStep.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			SiteRequestEnUS siteRequest = new SiteRequestEnUS();
  			siteRequest.setConfig(config());
  			siteRequest.setWebClient(webClient);
  			siteRequest.initDeepSiteRequestEnUS(siteRequest);
  			TrafficFcdReader reader = new TrafficFcdReader();
  			reader.setVertx(vertx);
  			reader.setWorkerExecutor(workerExecutor);
  			reader.initDeepForClass(siteRequest);
  			reader.importFcd().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						importDataClass(classSimpleName, nextStartTime);
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		}
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import IOT Node data
  	 * Val.Complete.enUS:Importing %s data completed. 
  	 * Val.Fail.enUS:Importing %s data failed. 
  	 */
  	private Future<Void> importDataIotNode() {
  		Promise<Void> promise = Promise.promise();
  		webClient.post(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(ConfigKeys.YGGIO_AUTH_LOCAL_URI))
  				.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  				.expect(ResponsePredicate.SC_OK)
  				.putHeader("Content-Type", "application/json")
  				.sendJsonObject(new JsonObject()
  						.put("username", config().getString(ConfigKeys.YGGIO_USERNAME))
  						.put("password", config().getString(ConfigKeys.YGGIO_PASSWORD))
  						)
  				.onSuccess(tokenResponse -> {
  			JsonObject token = tokenResponse.bodyAsJsonObject();
  			webClient.get(config().getInteger(ConfigKeys.YGGIO_PORT), config().getString(ConfigKeys.YGGIO_HOST_NAME), config().getString(ConfigKeys.YGGIO_API_RELATIVE_URI_IotNode))
  					.ssl(config().getBoolean(ConfigKeys.YGGIO_SSL))
  					.authentication(new TokenCredentials(token.getString("token")))
  					.expect(ResponsePredicate.SC_OK)
  					.send()
  					.onSuccess(response -> {
  				JsonArray data = response.bodyAsJsonArray();
  				List<Future> futures = new ArrayList<>();
  
  				data.stream().forEach(row -> {
  					JsonObject json = (JsonObject)row;
  					String id = json.getString("_id");
  
  					JsonObject body = new JsonObject()
  							.put(IotNode.VAR_saves, new JsonArray()
  									.add(IotNode.VAR_inheritPk)
  									.add(IotNode.VAR_json)
  									)
  							.put(IotNode.VAR_json, json)
  							.put(IotNode.VAR_pk, id)
  							;
  
  					JsonObject params = new JsonObject();
  					params.put("body", body);
  					params.put("path", new JsonObject());
  					params.put("cookie", new JsonObject());
  					params.put("query", new JsonObject().put("commitWithin", 10000).put("q", "*:*").put("var", new JsonArray().add("refresh:false")));
  					JsonObject context = new JsonObject().put("params", params);
  					JsonObject request = new JsonObject().put("context", context);
  					futures.add(vertx.eventBus().request(String.format("smart-village-view-enUS-%s", IotNode.CLASS_SIMPLE_NAME), request, new DeliveryOptions().addHeader("action", String.format("putimport%sFuture", IotNode.CLASS_SIMPLE_NAME))));
  				});
  				CompositeFuture.all(futures).onSuccess(a -> {
  					LOG.info(String.format(importDataIotNodeComplete, IotNode.CLASS_SIMPLE_NAME));
  					promise.complete();
  				}).onFailure(ex -> {
  					LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  					promise.fail(ex);
  				});
  			}).onFailure(ex -> {
  				LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  				promise.fail(ex);
  			});
  		}).onFailure(ex -> {
  			LOG.error(String.format(importDataIotNodeFail, IotNode.CLASS_SIMPLE_NAME), ex);
  			promise.fail(ex);
  		});
  		return promise.future();
  	}

README_END: |
  
  # Load a new map traffic data into SUMO
  
  ```bash
  cd ~/.local/share/sumo/data
  env LD_LIBRARY_PATH=~/.local/lib "SUMO_HOME=$HOME/.local/share/sumo" python ~/.local/share/sumo/tools/osmWebWizard.py
  ```
  
  # Export SUMO vehicle coordinate data
  
  ```bash
  env LD_LIBRARY_PATH=~/.local/lib "SUMO_HOME=$HOME/.local/share/sumo" SUMO_HOME=~/.local/share/sumo sumo --fcd-output ~/.local/share/sumo/data/veberod/veberod-fcd.xml -c ~/.local/share/sumo/data/veberod/veberod.sumocfg --fcd-output.geo -b 10 -e 360 --step-length 0.1
  ```
  
  # Run SUMO with Traci TCP server
  
  ```bash
  env SUMO_HOME=/home/ctate/.local/share/sumo LD_LIBRARY_PATH=/home/ctate/.local/lib /home/ctate/.local/bin/sumo-gui --remote-port 8813 --num-clients 1 --start
  ```
  
  ## Python interact with the Traci TCP server
  
  ```bash
  cd ~/.local/share/sumo/tools
  ```
  
  ```python
  import traci
  conn = traci.connect()
  conn.simulationStep()
  conn.simulationStep()
  conn.simulationStep()
  ```

