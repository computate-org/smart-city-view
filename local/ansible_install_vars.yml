---
API_VERSION: 1.0.2
GITHUB_ORG: computate-org
QUAYIO_ORG: computateorg
SITE_POWERED_BY_NAME: NERC
SITE_POWERED_BY_URL: https://nerc.mghpcc.org/
SITE_POWERED_BY_IMAGE_URI: /png/nerc/nerc-logo.png
SITE_NAME: smartabyar-smartvillage
SITE_DISPLAY_NAME: Smart Village Project
SITE_DESCRIPTION: Red Hat Global Social Innovation Program is partnering with Boston University and Smarta Byar in order to collaborate on creating a global and open research platform allowing researchers to study what social sustainability means by using a digital twin of Veber√∂d, Sweden as the test village, supported by Smarta Byar. The goal of this collaboration is to build the open source technological infrastructure so that researchers can collaborate on this platform effectively to study mobility, public health, sustainability among other study areas to ultimately help define better the link between well being and eco-smart cities. 
SITE_PUBLIC_URL: https://smartabyarsmartvillage.org
MAILING_LIST_URL: https://computate.topicbox.com/groups/smartabyar-smartvillage
MAILING_LIST_EMAIL: smartabyar-smartvillage@computate.topicbox.com
SITE_LICENSE_NAME: GNU GENERAL PUBLIC LICENSE, Version 3
SITE_LICENSE_URL: https://www.gnu.org/licenses/gpl-3.0.en.html
DEVELOPER_NAME: Christopher Tate
DEVELOPER_ORG_NAME: computate.org
DEVELOPER_ORG_URL: https://www.computate.org/
SITE_REPO: "git@github.com:{{ GITHUB_ORG }}/{{ SITE_NAME }}.git"
SITE_REPO_HTTPS: "{{ SITE_REPO | replace('git@github.com:', 'https://github.com/') }}"
SITE_LANG: enUS
SITE_ZONE: "America/New_York"

SITE_LOCALE: "en-US"
SITE_SRC: "{{ lookup('env', 'HOME') }}/.local/src/{{ SITE_NAME }}"
SITE_POM_GROUP_ID: org.computate
SITE_POM_ARTIFACT_ID_ROOT: "{{ SITE_NAME }}"
SITE_POM_VERSION_PREFIX: "{{ API_VERSION }}"
SITE_POM_VERSION_SUFFIX: ""
SITE_POM_VERSION: "{{ SITE_POM_VERSION_PREFIX }}{{ SITE_POM_VERSION_SUFFIX }}"
SITE_JAVA_PACKAGE: "{{ SITE_POM_GROUP_ID }}.smartvillageview.enus"
SITE_PORT: 12080
CLUSTER_PORT: "{{ SITE_PORT | regex_replace('(...)', '\\1') }}81"
JDBC_DATABASE: "smartvillage"
JDBC_USERNAME: "smartvillage"

AUTH_REALM: SMARTVILLAGE
AUTH_CLIENT: smartvillage

SOLR_HOST_NAME: solr-smartvillage.apps-crc.testing
SOLR_PORT: 443
SOLR_COLLECTION: "smartvillage"
SOLR_URL: "https://solr-solr.apps-crc.testing/solr/smartvillage"
SOLR_URL_COMPUTATE: "https://solr-solr.apps-crc.testing/solr/computate"
SOLR_SSL: true

JAVA_OPTS: "-XX:+ExitOnOutOfMemoryError"
ENABLE_SESSION_ID: true
ENABLE_DELETED: true
ENABLE_ARCHIVED: true
ENABLE_ROLE_ADMIN: true
ENABLE_ROLE_SUPER_ADMIN: true
ENABLE_OPENID_CONNECT: true
ENABLE_CODE_GENERATION_SERVICE: true
SITE_VOLUME_SIZE: 30Gi
SITE_VOLUME_NAME: "{{ SITE_NAME }}"
SITE_VOLUME_MOUNT_PATH: "/var/{{ SITE_NAME }}"
SITE_LIMITS_MEMORY: "1500Mi"
SITE_LIMITS_CPU: "700m"
SITE_REQUESTS_MEMORY: "1500Mi"
SITE_REQUESTS_CPU: "700m"
SITE_REPLICAS: 1

ENABLE_MENU_SiteHtm: false
ENABLE_MENU_TimeStep: false
ENABLE_MENU_SystemEvent: false
ENABLE_MENU_IotNodeStep: false

WRITE_API: true
WRITE_COMMENTS: true
PROJECTS: 

  - GITHUB_ORG: "{{ GITHUB_ORG }}"
    SITE_NAME: "{{ SITE_NAME }}"
    SITE_SRC: "{{ SITE_SRC }}"
    SITE_JAVA_PACKAGE: "{{ SITE_JAVA_PACKAGE }}"
    SITE_FILES: 
      - path: "{{ SITE_SRC }}/bin/touch.sh"
        template: touch.sh
      - path: "{{ SITE_SRC }}/bin/regenerate_classes.sh"
        template: bin/regenerate_classes.sh
      - path: "{{ SITE_SRC }}/pom.xml"
        template: java/pom.xml
      - path: "{{ SITE_SRC }}/install.yml"
        template: ansible/install.yml
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/package-info.java"
        template: java/package-info.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_ConfigKeys | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_ConfigKeys }}.java"
        template: config/ConfigKeys.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteRequest | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteRequest }}.java"
        template: request/SiteRequestEnUS.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_PageLayout | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.java"
        template: page/PageLayout.java
      - path: "{{ SITE_SRC }}/src/main/resources/templates/{{ SITE_LANG }}/{{ CLASS_SIMPLE_NAME_PageLayout }}.hbs"
        template: page/PageLayout.hbs
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_HomePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_HomePage }}.java"
        template: page/HomePage.java
      - path: "{{ SITE_SRC }}/src/main/resources/templates/{{ SITE_LANG }}/{{ CLASS_SIMPLE_NAME_HomePage }}.hbs"
        template: page/HomePage.hbs
      - path: "{{ SITE_SRC }}/src/main/resources/templates/{{ SITE_LANG }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.hbs"
        template: page/DynamicPage.hbs
      - path: "{{ SITE_SRC }}/src/main/resources/templates/{{ SITE_LANG }}/{{ CLASS_SIMPLE_NAME_DynamicGenPage }}.hbs"
        template: page/DynamicGenPage.hbs
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_MainVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_MainVerticle }}.java"
        template: vertx/MainVerticle.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_WorkerVerticle | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_WorkerVerticle }}.java"
        template: vertx/WorkerVerticle.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseModel | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseModel }}.java"
        template: base/BaseModel.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_BaseResult | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_BaseResult }}.java"
        template: base/BaseResult.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteUser | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteUser }}.java"
        template: user/SiteUser.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SitePage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SitePage }}.java"
        template: page/SitePage.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SitePage | replace('.', '/') }}/reader/{{ CLASS_SIMPLE_NAME_SitePage }}Reader.java"
        template: page/SitePageReader.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_SiteHtm | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_SiteHtm }}.java"
        template: htm/SiteHtm.java
      - path: "{{ SITE_SRC }}/src/main/java/{{ SITE_JAVA_PACKAGE | replace('.', '/') }}/{{ RELATIVE_PACKAGE_DynamicPage | replace('.', '/') }}/{{ CLASS_SIMPLE_NAME_DynamicPage }}.java"
        template: page/DynamicPage.java
      - path: "{{ SITE_SRC }}/src/main/resources/application.yml"
        template: java/application.yml
      - path: "{{ SITE_SRC }}/src/main/resources/simplelogger.properties"
        template: log4j/simplelogger.properties
      - path: "{{ SITE_SRC }}/local/defaults.yml"
        template: local/defaults.yml
      - path: "{{ SITE_SRC }}/local/template.yml"
        template: local/template.yml
      - path: "{{ SITE_SRC }}/CONTRIBUTING"
        template: license/CONTRIBUTING
      - path: "{{ SITE_SRC }}/DCO"
        template: license/DCO
      - path: "{{ SITE_SRC }}/LICENSE"
        template: license/LICENSE
      - path: "{{ SITE_SRC }}/README.md"
        template: local/README.md
      - path: "{{ SITE_SRC }}-static/js/jQuery-Autocomplete/jquery.autocomplete.js"
        template: js/jQuery-Autocomplete/jquery.autocomplete.js
      - path: "{{ SITE_SRC }}-static/js/jQuery-Autocomplete/license.txt"
        template: js/jQuery-Autocomplete/license.txt
      - path: "{{ SITE_SRC }}-static/js/jquery-1.12.4.min.js"
        template: js/jquery-1.12.4.min.js
      - path: "{{ SITE_SRC }}-static/js/jquery-ui.js"
        template: js/jquery-ui.js
      - path: "{{ SITE_SRC }}-static/js/datePicker.js"
        template: js/datePicker.js
      - path: "{{ SITE_SRC }}-static/css/datePicker.css"
        template: css/datePicker.css
      - path: "{{ SITE_SRC }}-static/js/plotly-2.9.0.min.js"
        template: js/plotly-2.9.0.min.js
      - path: "{{ SITE_SRC }}-static/js/site-enUS.js"
        template: js/site-enUS.js
      - path: "{{ SITE_SRC }}-static/js/sockjs.js"
        template: js/sockjs.js
      - path: "{{ SITE_SRC }}-static/js/sockjs-map.json"
        template: js/sockjs-map.json
      - path: "{{ SITE_SRC }}-static/js/vertx-eventbus.js"
        template: js/vertx-eventbus.js
      - path: "{{ SITE_SRC }}-static/js/fullcalendar/main.min.js"
        template: fullcalendar/main.min.js
      - path: "{{ SITE_SRC }}-static/css/jquery-ui.css"
        template: css/jquery-ui.css
      - path: "{{ SITE_SRC }}-static/css/site-{{ SITE_LANG }}.css"
        template: css/site-enUS.css
      - path: "{{ SITE_SRC }}-static/css/w3.css"
        template: css/w3.css
      - path: "{{ SITE_SRC }}-static/css/fullcalendar/main.min.js"
        template: fullcalendar/main.min.css
      - path: "{{ SITE_SRC }}-static/svg/openshift.svg"
        template: svg/openshift.svg
      - path: "{{ SITE_SRC }}/.gitignore"
        template: config/gitignore
      - path: "{{ SITE_SRC }}-static/.gitignore"
        template: config/gitignore
      - path: "{{ SITE_SRC }}/openshift/defaults.yml"
        template: openshift/defaults.yml
      - path: "{{ SITE_SRC }}/Containerfile"
        template: openshift/Containerfile

CONFIG_TEMPLATE: |2
  
  YGGIO_HOST_NAME: "\{\{ YGGIO_HOST_NAME | default('') \}\}"
  YGGIO_PORT: \{\{ YGGIO_PORT | default('') \}\}
  YGGIO_SSL: \{\{ YGGIO_SSL | default('') | lower \}\}
  YGGIO_USERNAME: "\{\{ YGGIO_USERNAME | default('') \}\}"
  YGGIO_PASSWORD: "\{\{ YGGIO_PASSWORD | default('') \}\}"
  YGGIO_API_RELATIVE_URI_IotNode: /api/iotnodes
  YGGIO_AUTH_LOCAL_URI: /api/auth/local
  DEFAULT_MAP_LOCATION: "55.61888,13.548799"
  DEFAULT_MAP_ZOOM: "3"

CONFIG_KEYS: |2
  
  	/**
  	 * 
  	 **/
  	public static final String SUMO_EXECUTABLE_PATH = "SUMO_EXECUTABLE_PATH";
  
  	/**
  	 * 
  	 **/
  	public static final String PYTHON_EXECUTABLE_PATH = "PYTHON_EXECUTABLE_PATH";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_HOST_NAME = "YGGIO_HOST_NAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PORT = "YGGIO_PORT";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_SSL = "YGGIO_SSL";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_API_RELATIVE_URI_IotNode = "YGGIO_API_RELATIVE_URI_IotNode";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_AUTH_LOCAL_URI = "YGGIO_AUTH_LOCAL_URI";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_USERNAME = "YGGIO_USERNAME";
  
  	/**
  	 * 
  	 **/
  	public static final String YGGIO_PASSWORD = "YGGIO_PASSWORD";
  
  	/**
  	 * The Floating Car Data directory. 
  	 **/
  	public static final String FCD_SYNC_PATH = "FCD_SYNC_PATH";
  
  	/**
  	 * The max number of Floating Car Data records to load in a batch. 
  	 **/
  	public static final String FCD_MAX_RECORD_SIZE = "FCD_MAX_RECORD_SIZE";
  
  	/**
  	 * Whether the FIWARE Context Broker uses SSL. 
  	 **/
  	public static final String FIWARE_SSL = "FIWARE_SSL";
  
  	/**
  	 * The FIWARE Context Broker host name. 
  	 **/
  	public static final String FIWARE_HOST_NAME = "FIWARE_HOST_NAME";
  
  	/**
  	 * The FIWARE Context Broker port. 
  	 **/
  	public static final String FIWARE_PORT = "FIWARE_PORT";
  
  	/**
  	 * The FIWARE Context Broker v2 API URI prefix. 
  	 **/
  	public static final String FIWARE_API_URI = "FIWARE_API_URI";
  
  	/**
  	 * API counter resume TimeStep
  	 */
  	public static final String API_COUNTER_RESUME_TimeStep = "API_COUNTER_RESUME_TimeStep";
  
  	/**
  	 * API counter fetch TimeStep
  	 */
  	public static final String API_COUNTER_FETCH_TimeStep = "API_COUNTER_FETCH_TimeStep";
  
  	/**
  	 * API counter resume VehicleStep
  	 */
  	public static final String API_COUNTER_RESUME_VehicleStep = "API_COUNTER_RESUME_VehicleStep";
  
  	/**
  	 * API counter fetch VehicleStep
  	 */
  	public static final String API_COUNTER_FETCH_VehicleStep = "API_COUNTER_FETCH_VehicleStep";
  
  	/**
  	 * API counter fetch SitePage
  	 */
  	public static final String API_COUNTER_FETCH_SitePage = "API_COUNTER_FETCH_SitePage";
  
  	/**
  	 * API counter fetch SiteHtm
  	 */
  	public static final String API_COUNTER_FETCH_SiteHtm = "API_COUNTER_FETCH_SiteHtm";
  
  	public static final String KAFKA_BROKERS = "KAFKA_BROKERS";
  	public static final String KAFKA_GROUP = "KAFKA_GROUP";
  	public static final String KAFKA_TOPIC_SUMO_RUN = "KAFKA_TOPIC_SUMO_RUN";
  	public static final String KAFKA_TOPIC_SUMO_RUN_REPORT = "KAFKA_TOPIC_SUMO_RUN_REPORT";
  	public static final String KAFKA_TOPIC_SUMO_STOP = "KAFKA_TOPIC_SUMO_STOP";
  	public static final String KAFKA_TOPIC_SUMO_SIMULATION_INFO = "KAFKA_TOPIC_SUMO_SIMULATION_INFO";
  	public static final String KAFKA_TOPIC_SUMO_SIMULATION_INFO_PATCH = "KAFKA_TOPIC_SUMO_SIMULATION_INFO_PATCH";
  	public static final String KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO = "KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO";
  	public static final String KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO_PATCH = "KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO_PATCH";
  	public static final String KAFKA_SECURITY_PROTOCOL = "KAFKA_SECURITY_PROTOCOL";
  	public static final String KAFKA_SSL_KEYSTORE_TYPE = "KAFKA_SSL_KEYSTORE_TYPE";
  	public static final String KAFKA_SSL_KEYSTORE_LOCATION = "KAFKA_SSL_KEYSTORE_LOCATION";
  	public static final String KAFKA_SSL_KEYSTORE_PASSWORD = "KAFKA_SSL_KEYSTORE_PASSWORD";
  	public static final String KAFKA_SSL_TRUSTSTORE_TYPE = "KAFKA_SSL_TRUSTSTORE_TYPE";
  	public static final String KAFKA_SSL_TRUSTSTORE_LOCATION = "KAFKA_SSL_TRUSTSTORE_LOCATION";
  	public static final String KAFKA_SSL_TRUSTSTORE_PASSWORD = "KAFKA_SSL_TRUSTSTORE_PASSWORD";
  
  	public static final String MQTT_ENABLED = "MQTT_ENABLED";
  	public static final String MQTT_HOST = "MQTT_HOST";
  	public static final String MQTT_PORT = "MQTT_PORT";
  	public static final String MQTT_IOT_SUBSCRIBE_TOPIC = "MQTT_IOT_SUBSCRIBE_TOPIC";

MAIN_VERTICLE_IMPORTS: |
  import org.computate.smartvillageview.enus.mqtt.MqttMessageReader;

WORKER_IMPORTS: |
  import java.time.LocalDateTime;
  import io.vertx.ext.jdbc.JDBCClient;
  import io.vertx.sqlclient.Cursor;
  import io.vertx.sqlclient.SqlConnection;
  import io.vertx.ext.web.client.predicate.ResponsePredicate;
  import io.vertx.ext.auth.authentication.TokenCredentials;
  import org.computate.smartvillageview.enus.model.iotnode.IotNode;
  import org.computate.smartvillageview.enus.model.traffic.simulation.reader.TrafficFcdReader;
  import org.computate.smartvillageview.enus.model.traffic.time.step.TimeStep;
  import org.computate.smartvillageview.enus.model.iotnode.reader.IotNodeReader;
  import org.computate.smartvillageview.enus.camel.CamelIntegration;

WORKER_IMPORT_DATA: |2
  
  	/**	
  	 * Import initial data
  	 * Val.Skip.enUS:The data import is disabled. 
  	 **/
  	private Future<Void> importData() {
  		Promise<Void> promise = Promise.promise();
  		if(config().getBoolean(ConfigKeys.ENABLE_IMPORT_DATA)) {
  			importTimer(IotNode.CLASS_SIMPLE_NAME).onSuccess(a -> {
  				importTimer(SitePage.CLASS_SIMPLE_NAME).onSuccess(b -> {
  					importTimer(TrafficSimulation.CLASS_SIMPLE_NAME).onSuccess(c -> {
  						promise.complete();
  					});
  				});
  			});
  		}
  		else {
  			LOG.info(importDataSkip);
  			promise.complete();
  		}
  		return promise.future();
  	}
  
  	/**
  	 * Description: Import initial data
  	 * Val.Complete.enUS:Configuring the import of %s data completed. 
  	 * Val.Fail.enUS:Configuring the import of %s data failed. 
  	 */
  	private Future<Void> importDataClass(String classSimpleName, ZonedDateTime startDateTime) {
  		Promise<Void> promise = Promise.promise();
  		if(IotNode.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			SiteRequestEnUS siteRequest = new SiteRequestEnUS();
  			siteRequest.setConfig(config());
  			siteRequest.setWebClient(webClient);
  			siteRequest.initDeepSiteRequestEnUS(siteRequest);
  			IotNodeReader reader = new IotNodeReader();
  			reader.setVertx(vertx);
  			reader.setWorkerExecutor(workerExecutor);
  			reader.setTemplateEngine(templateEngine);
  			reader.setHandlebars(handlebars);
  			reader.initDeepForClass(siteRequest);
  			reader.importData().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						workerExecutor.executeBlocking(promise2 -> {
  							importDataClass(classSimpleName, nextStartTime).onSuccess(c -> {
  								promise2.complete();
  							}).onFailure(ex -> {
  								promise2.fail(ex);
  							});
  						});
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if(SitePage.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			SiteRequestEnUS siteRequest = new SiteRequestEnUS();
  			siteRequest.setConfig(config());
  			siteRequest.setWebClient(webClient);
  			siteRequest.initDeepSiteRequestEnUS(siteRequest);
  			SitePageReader reader = new SitePageReader();
  			reader.setVertx(vertx);
  			reader.setWorkerExecutor(workerExecutor);
  			reader.setTemplateEngine(templateEngine);
  			reader.setHandlebars(handlebars);
  			reader.setKafkaProducer(kafkaProducer);
  			reader.initDeepForClass(siteRequest);
  			reader.importDataSitePages().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						workerExecutor.executeBlocking(promise2 -> {
  							importDataClass(classSimpleName, nextStartTime).onSuccess(c -> {
  								promise2.complete();
  							}).onFailure(ex -> {
  								promise2.fail(ex);
  							});
  						});
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		} else if(TrafficSimulation.CLASS_SIMPLE_NAME.equals(classSimpleName)) {
  			SiteRequestEnUS siteRequest = new SiteRequestEnUS();
  			siteRequest.setConfig(config());
  			siteRequest.setWebClient(webClient);
  			siteRequest.initDeepSiteRequestEnUS(siteRequest);
  			TrafficFcdReader reader = new TrafficFcdReader(vertx, workerExecutor, siteRequest, config());
  			reader.initDeepForClass(siteRequest);
  			reader.importFcd().onComplete(a -> {
  				String importPeriod = config().getString(String.format("%s_%s", ConfigKeys.IMPORT_DATA_PERIOD, classSimpleName));
  				if(importPeriod != null && startDateTime != null) {
  					Duration duration = TimeTool.parseNextDuration(importPeriod);
  					ZonedDateTime nextStartTime = startDateTime.plus(duration);
  					LOG.info(String.format(importTimerScheduling, classSimpleName, nextStartTime.format(TIME_FORMAT)));
  					Duration nextStartDuration = Duration.between(Instant.now(), nextStartTime);
  					vertx.setTimer(nextStartDuration.toMillis(), b -> {
  						workerExecutor.executeBlocking(promise2 -> {
  							importDataClass(classSimpleName, nextStartTime).onSuccess(c -> {
  								promise2.complete();
  							}).onFailure(ex -> {
  								promise2.fail(ex);
  							});
  						});
  					});
  					promise.complete();
  				} else {
  					promise.complete();
  				}
  			});
  		}
  		return promise.future();
  	}

AFTER_htmStylePageLayout: |2
  		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Anonymous%20Pro%7CBellefair%7CJomhuria%7CPT%20Serif%3A700%7CStint%20Ultra%20Condensed&amp;display=swap"/>

ALL_Containerfile: |2
  FROM quay.io/centos/centos:stream8
  
  MAINTAINER Christopher Tate <computate@computate.org>
  
  ENV APP_NAME=sumo \
  	APP_DEPENDENCIES="rsync git python3 python3-pip python3-virtualenv make gcc gcc-c++ readline-devel tcl zlib-devel libpng-devel libjpeg-turbo-devel libtiff-devel libXext-devel libXft-devel mesa-libGLw mesa-libGL-devel mesa-libGLU-devel cmake xerces-c-devel proj-devel gl2ps-devel swig java-11-openjdk-devel maven libsq3-devel libsqlite3x-devel" \
  	# gtest-devel gdal-devel ffmpeg-devel
  	APP_DISPLAY_NAME="SUMO Simulation of Urban Mobility" \
  	APP_PREFIX="/usr/local" \
  	APP_SRC="/usr/local/src/sumo" \
  	APP_SHARE="/usr/local/share/sumo" \
  	APP_REPO_HTTPS="https://github.com/eclipse/sumo.git" \
  	APP_TAG="v1_12_0" \
  	APP_EXEC="/usr/local/bin/sumo-gui" \
  	PYTHON_DIR="/opt/python" \
  	SUMO_HOME="/usr/local/share/sumo" \
  	LD_LIBRARY_PATH="/usr/local/lib:/usr/local/lib64"
  
  USER root
  
  RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
  RUN rpm -ivh https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm
  
  RUN yum install -y ${APP_DEPENDENCIES}
  
  RUN /usr/bin/virtualenv ${PYTHON_DIR}
  RUN source ${PYTHON_DIR}/bin/activate && pip install setuptools_rust wheel
  RUN source ${PYTHON_DIR}/bin/activate && pip install --upgrade pip
  RUN source ${PYTHON_DIR}/bin/activate && pip install ansible sumolib pyproj
  RUN git clone https://github.com/computate-org/computate.git /root/src/computate
  RUN git clone https://github.com/computate-org/computate_sumo.git /root/.ansible/roles/computate.computate_sumo
  RUN git clone https://github.com/computate-org/computate_sqlite.git /root/.ansible/roles/computate.computate_sqlite
  RUN git clone https://github.com/computate-org/computate_fox.git /root/.ansible/roles/computate.computate_fox
  RUN git clone https://github.com/computate-org/computate_gtest.git /root/.ansible/roles/computate.computate_gtest
  RUN git clone https://github.com/computate-org/computate_eigen.git /root/.ansible/roles/computate.computate_eigen
  RUN git clone https://github.com/computate-org/computate_gdal.git /root/.ansible/roles/computate.computate_gdal
  RUN source ${PYTHON_DIR}/bin/activate && ${PYTHON_DIR}/bin/ansible-playbook -e  APP_PREFIX=/usr/local -e APP_DOWNLOAD_DIR=/tmp /root/.ansible/roles/computate.computate_sumo/install.yml
  
  RUN install -d /root/src/{{SITE_NAME }}
  COPY . /root/src/{{SITE_NAME }}
  
  WORKDIR /root/src/{{SITE_NAME }}
  RUN mvn clean install -DskipTests
  RUN cp /root/src/{{SITE_NAME }}/target/*.jar /root/src/{{SITE_NAME }}/app.jar
  CMD java $JAVA_OPTS -cp .:* org.computate.smartvillageview.enus.vertx.MainVerticle

BEFORE_Containerfile: |2
  
  ENV APP_NAME=sumo \
  	APP_DEPENDENCIES="git python3 python3-pip python3-virtualenv make gcc gcc-c++ readline-devel tcl zlib-devel libpng-devel libjpeg-turbo-devel libtiff-devel libXext-devel mesa-libGLw mesa-libGL-devel mesa-libGLU-devel" \
  	APP_DISPLAY_NAME="SUMO Simulation of Urban Mobility" \
  	APP_PREFIX="/usr/local" \
  	APP_SRC="/usr/local/src/sumo" \
  	APP_SHARE="/usr/local/share/sumo" \
  	APP_REPO_HTTPS="https://github.com/eclipse/sumo.git" \
  	APP_TAG="v1_12_0" \
  	APP_EXEC="/usr/local/bin/sumo-gui" \
  	PYTHON_DIR="/opt/python"

MIDDLE_Containerfile: |2
  
  RUN microdnf install -y ${APP_DEPENDENCIES}
  RUN /usr/bin/virtualenv ${PYTHON_DIR}
  RUN source ${PYTHON_DIR}/bin/activate && pip install setuptools_rust wheel
  RUN source ${PYTHON_DIR}/bin/activate && pip install --upgrade pip
  RUN source ${PYTHON_DIR}/bin/activate && pip install ansible
  RUN git clone https://github.com/computate-org/computate_sumo.git /home/jboss/.ansible/roles/computate.computate_sumo
  RUN git clone https://github.com/computate-org/computate_sqlite.git /home/jboss/.ansible/roles/computate.computate_sqlite
  RUN git clone https://github.com/computate-org/computate_fox.git /home/jboss/.ansible/roles/computate.computate_fox
  RUN source ${PYTHON_DIR}/bin/activate && env APP_PREFIX=/usr/local APP_DOWNLOAD_DIR=/tmp ${PYTHON_DIR}/bin/ansible-playbook /home/jboss/.ansible/roles/computate.computate_sumo/install.yml

README_END: |
  
  ## How the base classes for this project were created
  
  ```bash
  ansible-playbook -e @~/.local/src/{{ SITE_NAME }}/local/ansible_install_vars.yml ~/.local/src/computate-org/vertx_project.yml
  ```
  
  # Load a new map traffic data into SUMO
  
  ```bash
  cd ~/.local/share/sumo/data
  env LD_LIBRARY_PATH=~/.local/lib:~/.local/lib64 "SUMO_HOME=$HOME/.local/share/sumo" python ~/.local/share/sumo/tools/osmWebWizard.py
  ```
  
  # Export SUMO vehicle coordinate data
  
  ```bash
  env LD_LIBRARY_PATH=~/.local/lib:~/.local/lib64 "SUMO_HOME=$HOME/.local/share/sumo" SUMO_HOME=~/.local/share/sumo sumo --fcd-output ~/.local/share/sumo/data/veberod/veberod-fcd.xml -c ~/.local/share/sumo/data/veberod/veberod.sumocfg --fcd-output.geo -b 10 -e 360 --step-length 0.1
  ```
  
  # Export SUMO full data
  
  ```bash
  env LD_LIBRARY_PATH=~/.local/lib:~/.local/lib64 "SUMO_HOME=$HOME/.local/share/sumo" SUMO_HOME=~/.local/share/sumo sumo --full-output ~/.local/share/sumo/data/veberod/veberod-full.xml -c ~/.local/share/sumo/data/veberod/veberod.sumocfg --fcd-output.geo -b 10 -e 360 --step-length 0.1
  ```
  
  # Convert X,Y coordinates to geo coordinates with python
  
  The Veberod_intersection.net.xml contains data about traffic lights like the x/y position. 
  
  ```xml
  <junction id="267701936" type="traffic_light" x="220.61" y="853.48" 
  ```
  
  To convert the x/y position, use python: 
  
  ```bash
  pip install pyproj sumolib
  python
  >>> import sumolib
  >>> net = sumolib.net.readNet('/home/ctate/.local/src/TLC/TLC_sumo/Veberod_intersection.net.xml')
  >>> print(net.convertXY2LonLat(220.61,853.48))
  (13.49260653795143, 55.633791753658265)
  ```
  
  # Run SUMO with Traci TCP server
  
  ```bash
  env SUMO_HOME=/home/ctate/.local/share/sumo LD_LIBRARY_PATH=/home/ctate/.local/lib:~/.local/lib64 /home/ctate/.local/bin/sumo-gui --remote-port 8813 --num-clients 1 --start
  ```
  
  ## Python interact with the Traci TCP server
  
  ```bash
  cd ~/.local/share/sumo/tools
  ```
  
  ```python
  import traci
  conn = traci.connect()
  conn.simulationStep()
  conn.simulationStep()
  conn.simulationStep()
  ```

MIDDLE_API_COUNTER: |
  API_COUNTER_RESUME: 0
  API_COUNTER_FETCH: 1
  API_COUNTER_RESUME_TimeStep: 0
  API_COUNTER_FETCH_TimeStep: 1
  API_COUNTER_RESUME_VehicleStep: 0
  API_COUNTER_FETCH_VehicleStep: 10
  API_COUNTER_FETCH_SitePage: 10
  API_COUNTER_FETCH_SiteHtm: 10

SITE_POM_DEPENDENCIES_END: |-2
  
  
  		<dependency>
  			<groupId>org.apache.commons</groupId>
  			<artifactId>commons-exec</artifactId>
  			<version>1.3</version>
  		</dependency>

SITE_POM_END: |-2
  

  	<distributionManagement>
  		<!-- Central Repository -->
  		<snapshotRepository>
  			<id>ossrh</id>
  			<url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
  		</snapshotRepository>
  	</distributionManagement>

SITE_APPLICATION_YML_END: |-2
  
  KAFKA_TOPIC_SUMO_RUN: smartvillage-sumo-run
  KAFKA_TOPIC_SUMO_STOP: smartvillage-sumo-stop
  KAFKA_TOPIC_SUMO_RUN_REPORT: smartvillage-sumo-run-report
  KAFKA_TOPIC_SUMO_SIMULATION_INFO: smartvillage-sumo-simulation-info
  KAFKA_TOPIC_SUMO_SIMULATION_INFO_PATCH: smartvillage-sumo-simulation-info-patch
  KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO: smartvillage-sumo-traffic-flow-observed-info
  KAFKA_TOPIC_SUMO_TRAFFIC_FLOW_OBSERVED_INFO_PATCH: smartvillage-sumo-traffic-flow-observed-info-patch
  
  MQTT_ENABLED: true
  MQTT_HOST: fiware-broker-mqtt-nodeport.apps-crc.testing
  MQTT_PORT: 30083
  MQTT_IOT_SUBSCRIBE_TOPIC: iot/subscribe

